name: Security CI/CD

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
    inputs:
      project_name:
        description: 'Dependency Tracker Project Name'
        required: true
      project_version:
        description: 'Project Version'
        required: true

jobs:
  dependency-track:
    runs-on: ubuntu-latest  # Use a standard runner

    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup pnpm global bin directory
        shell: bash  # Ensure that bash is used as the shell
        run: |
          pnpm setup
          echo "export PNPM_HOME=$(pnpm env get-bin-dir)" >> $GITHUB_ENV
          echo "export PATH=$PNPM_HOME:$PATH" >> $GITHUB_ENV

      - name: Verify pnpm setup
        run: |
          source $GITHUB_ENV
          pnpm --version
          which pnpm

      - name: Install dependencies using pnpm
        run: |
          source $GITHUB_ENV
          pnpm install

      - name: Install CycloneDX globally using pnpm
        run: |
          source $GITHUB_ENV
          pnpm add -g @cyclonedx/cyclonedx-npm

      - name: Check CycloneDX installation
        run: |
          source $GITHUB_ENV
          cyclonedx-npm --version
          which cyclonedx-npm

      - name: Generate SBOM
        run: |
          source $GITHUB_ENV
          cyclonedx-npm --output-file sbom.json

      - name: Set Project Name and Version
        run: |
          echo "Setting Project Name and Version"
          echo "PROJECT_NAME=${{ github.event.inputs.project_name }}" >> $GITHUB_ENV
          echo "PROJECT_VERSION=${{ github.event.inputs.project_version }}" >> $GITHUB_ENV

      - name: Check if project exists
        id: check_project
        run: |
          source $GITHUB_ENV
          RESPONSE=$(curl -s -X GET "http://deptracker-dependency-track-api-server.deptracker.svc.cluster.local/api/v1/project?name=${PROJECT_NAME}" -H "X-Api-Key: ${{ secrets.DT_ACCESS_API_KEY }}")
          if echo "$RESPONSE" | grep -q '"name":"${PROJECT_NAME}"'; then
            echo "Project exists"
            echo "::set-output name=project_exists::true"
          else
            echo "Project does not exist"
            echo "::set-output name=project_exists::false"
          fi

      - name: Create project if not exists
        if: steps.check_project.outputs.project_exists == 'false'
        run: |
          source $GITHUB_ENV
          curl -s -X PUT "http://deptracker-dependency-track-api-server.deptracker.svc.cluster.local/api/v1/project" \
            -H "Content-Type: application/json" \
            -H "X-Api-Key: ${{ secrets.DT_ACCESS_API_KEY }}" \
            -d '{
              "name": "'"${PROJECT_NAME}"'",
              "version": "'"${PROJECT_VERSION}"'"
            }'

      - n
